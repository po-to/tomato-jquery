import * as url from 'url';
import * as path from 'path';
import * as http from 'http';
import * as fs from 'fs';
import * as ejs from 'ejs';

let root:string;
let config:{key:string};

let mime = {
    "css": "text/css",
    "gif": "image/gif",
    "html": "text/html",
    "ico": "image/x-icon",
    "jpeg": "image/jpeg",
    "jpg": "image/jpeg",
    "js": "text/javascript",
    "json": "application/json",
    "pdf": "application/pdf",
    "png": "image/png",
    "svg": "image/svg+xml",
    "swf": "application/x-shockwave-flash",
    "tiff": "image/tiff",
    "txt": "text/plain",
    "wav": "audio/x-wav",
    "wma": "audio/x-ms-wma",
    "wmv": "video/x-ms-wmv",
    "xml": "text/xml"
}
let conversions:{[key:string]:(filePath:string,res: http.ServerResponse,extname:string)=>void} = {
    htmlTojs : function(filePath, res, extname){
        fs.readFile(filePath,'utf-8',function(error,data){
            if(error){
                onError(res);
            }else{
                data = ejs.render(data,{},{delimiter:'$$',filename:filePath});
                let str = `(function(factory) {	
                    if(typeof exports === 'object' && typeof module === 'object'){		
                        module.exports = factory();	
                    }else if(typeof define === 'function' && define.amd){		
                        define(factory);	
                    }})(function() { 
                        return ${JSON.stringify(data)}
                    });`;
                res.setHeader('Content-Type', 'text/javascript');
                res.setHeader('Content-Length', Buffer.byteLength(str)+'');
                res.writeHead(200);
                res.end(str);
            }
        })
    },
    render : function(filePath, res, extname){
        fs.readFile(filePath,'utf-8',function(error,data){
            if(error){
                onError(res);
            }else{
                let str = ejs.render(data,{},{delimiter:'$$',filename:filePath});
                res.setHeader('Content-Type', mime[extname]);
                res.setHeader('Content-Length', Buffer.byteLength(str)+'');
                res.writeHead(200);
                res.end(str);
            }
        })
    }
};
export =  function (dir:string, options?:{},loaders?:{[key:string]:(filePath:string)=>string|Error}){
    root = dir;
    return handler;
}
function onError(res: http.ServerResponse){
    res.statusCode = 404;
    res.end('not found');
}
function handler(req: http.IncomingMessage, res: http.ServerResponse): void{
    if (req.method !== 'GET' && req.method !== 'HEAD' || (req.url || '').endsWith("/")) {
        return onError(res);
    }
    let urlData = url.parse(req.url || "", false);
    let pathName = decodeURI(urlData.pathname || "");
    let basename = path.basename(pathName);
    let filenameArr = basename.split('.');
    if(filenameArr.length < 2){
        return onError(res);
    }
    if(filenameArr.length == 2){
        filenameArr.push(filenameArr[filenameArr.length-1])
    }
    let extname = filenameArr.pop();
    let oExtname = filenameArr.pop() as string;
    let fileName = filenameArr.join(".");
    let filePath = path.join(root,pathName);
    
    fs.stat(filePath, (err, stats) => {
        if (err) {
            return onError(res);
        };
        if (stats.isDirectory()) {
            filePath = path.join(filePath, 'index.'+oExtname);
            fs.stat(filePath, (err, stats) => {
                if (err) {
                    return onError(res);
                };
                let conversion;
                if(oExtname==extname){
                    conversion = conversions['render'];
                }else{
                    conversion = conversions[oExtname+'To'+extname];
                }
                if(!conversion){
                    return onError(res);
                }
                conversion(filePath,res,extname);
            })
        }else{
            return onError(res);
        }
        
    });
}
