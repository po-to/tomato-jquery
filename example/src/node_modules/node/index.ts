import * as connect from 'connect';
import * as compression from 'compression';
import * as session from 'express-session';
import * as cookieParser from 'cookie-parser';
import * as bodyParser from 'body-parser';
import * as serveStatic from 'serve-static';
import * as url from 'url';
import * as http from 'http';
import * as potato from '@po-to/potato';
import statics =  require('./statics');
import * as app from './app';
import * as ejs from 'ejs';

potato.setConfig({
    core:app.core,
    amdPaths:{
        'tpl://':"`$$STATICURL`/"
    },
    amdCaches:{
        'renderer://ejs': ejs
    }
});
let staticSite: (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: Error) => void) => void = serveStatic('`$$STATICDIST`', {
    'index': false, 'redirect':false, 'fallthrough': true, 'setHeaders': function (res, path) {
        res.setHeader('Access-Control-Allow-Origin', '*')
    }
});
let staticBuilder: (req: http.IncomingMessage, res: http.ServerResponse) => void = statics('`$$STATICDIST`');

let server = connect()
    .use(compression())
    .use("/static",function (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: Error) => void) {
        staticSite(req, res, function(){
            staticBuilder(req,res);
        })
    })
    .use(potato.MRouting)
    .use(bodyParser.json())//parse application/json
    .use(bodyParser.urlencoded({ extended: false }))//parse application/x-www-form-urlencoded
    .use(cookieParser('test'))
    .use(session({
        secret: 'test',
        resave: false,
        saveUninitialized: true,
    }))
    .use(potato.MEntrance)
    .use(function (err:any, req: http.IncomingMessage, res: http.ServerResponse, next) {
        let status = parseInt(err.status || err.message) || 500;
        let code = parseFloat(err.status || err.message) || 500;
        let note = err.message || '';
        res.writeHead(status);
        res.end(note);

    })
    .listen(`$$PORT`);

